{"version":3,"sources":["angular-object-diff.min.js"],"names":["objectDiff","setOpenChar","char","openChar","setCloseChar","closeChar","diff","a","b","shallow","isOwn","equalObj","diffValue","equal","key","hasOwnProperty","isValidAttr","valueDiff","changed","removed","added","value","diffOwnProperties","deep","formatToJsonXMLString","changes","properties","inspect","push","formatChange","join","formatObjToJsonXMLString","obj","formatChangesToXMLString","typeA","typeB","diffItem","diffOnly","property","stringifyObjectKey","escapeHTML","prefix","test","JSON","stringify","string","replace","_inspect","accumulator","keys","Object","length","i","String","service","toJsonView","objToJsonView","toJsonDiffView","toJsonViewFilter","ObjectDiff","toJsonDiffViewFilter","objToJsonViewFilter","angular","module","factory","filter","$inject"],"mappings":"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","file":"angular-object-diff.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('ds.objectDiff', [])\r\n        .factory('ObjectDiff', objectDiff)\r\n        .filter('toJsonView', toJsonViewFilter)\r\n        .filter('toJsonDiffView', toJsonDiffViewFilter)\r\n        .filter('objToJsonView', objToJsonViewFilter);\r\n\r\n    toJsonViewFilter.$inject = ['ObjectDiff'];\r\n    toJsonDiffViewFilter.$inject = ['ObjectDiff'];\r\n    objToJsonViewFilter.$inject = ['ObjectDiff'];\r\n\r\n    /* service implementation */\r\n    function objectDiff() {\r\n\r\n        var openChar = '{',\r\n            closeChar = '}',\r\n            service = {\r\n                setOpenChar: setOpenChar,\r\n                setCloseChar: setCloseChar,\r\n                diff: diff,\r\n                diffOwnProperties: diffOwnProperties,\r\n                toJsonView: formatToJsonXMLString,\r\n                objToJsonView: formatObjToJsonXMLString,\r\n                toJsonDiffView: formatChangesToXMLString\r\n            };\r\n\r\n        return service;\r\n\r\n\r\n        /* service methods */\r\n\r\n        /**\r\n         * @param char\r\n         */\r\n        function setOpenChar(char) {\r\n            openChar = char;\r\n        }\r\n\r\n        /**\r\n         * @param char\r\n         */\r\n        function setCloseChar(char) {\r\n            closeChar = char;\r\n        }\r\n\r\n        /**\r\n         * diff between object a and b\r\n         * @param {Object} a\r\n         * @param {Object} b\r\n         * @param shallow\r\n         * @param isOwn\r\n         * @return {Object}\r\n         */\r\n        function diff(a, b, shallow, isOwn) {\r\n\r\n            if (a === b) {\r\n                return equalObj(a);\r\n            }\r\n\r\n            var diffValue = {};\r\n            var equal = true;\r\n\r\n            for (var key in a) {\r\n                if ((!isOwn && key in b) || (isOwn && b.hasOwnProperty(key))) {\r\n                    if (a[key] === b[key]) {\r\n                        diffValue[key] = equalObj(a[key]);\r\n                    } else {\r\n                        if (!shallow && isValidAttr(a[key], b[key])) {\r\n                            var valueDiff = diff(a[key], b[key], isOwn);\r\n                            if (valueDiff.changed == 'equal') {\r\n                                diffValue[key] = equalObj(a[key]);\r\n                            } else {\r\n                                equal = false;\r\n                                diffValue[key] = valueDiff;\r\n                            }\r\n                        } else {\r\n                            equal = false;\r\n                            diffValue[key] = {\r\n                                changed: 'primitive change',\r\n                                removed: a[key],\r\n                                added: b[key]\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    equal = false;\r\n                    diffValue[key] = {\r\n                        changed: 'removed',\r\n                        value: a[key]\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (key in b) {\r\n                if ((!isOwn && !(key in a)) || (isOwn && !a.hasOwnProperty(key))) {\r\n                    equal = false;\r\n                    diffValue[key] = {\r\n                        changed: 'added',\r\n                        value: b[key]\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (equal) {\r\n                return equalObj(a);\r\n            } else {\r\n                return {\r\n                    changed: 'object change',\r\n                    value: diffValue\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * diff between object a and b own properties only\r\n         * @param {Object} a\r\n         * @param {Object} b\r\n         * @return {Object}\r\n         * @param deep\r\n         */\r\n        function diffOwnProperties(a, b, deep) {\r\n            return diff(a, b, deep, true);\r\n        }\r\n\r\n        /**\r\n         * Convert to a readable xml/html Json structure\r\n         * @param {Object} changes\r\n         * @return {string}\r\n         * @param shallow\r\n         */\r\n        function formatToJsonXMLString(changes, shallow) {\r\n            var properties = [];\r\n\r\n            var diff = changes.value;\r\n            if (changes.changed == 'equal') {\r\n                return inspect(diff, shallow);\r\n            }\r\n\r\n            for (var key in diff) {\r\n                properties.push(formatChange(key, diff[key], shallow));\r\n            }\r\n\r\n            return '<span>' + openChar + '</span>\\n<div class=\"diff-level\">' + properties.join('<span>,</span>\\n') + '\\n</div><span>' + openChar + '</span>';\r\n\r\n        }\r\n\r\n        /**\r\n         * Convert to a readable xml/html Json structure\r\n         * @return {string}\r\n         * @param obj\r\n         * @param shallow\r\n         */\r\n        function formatObjToJsonXMLString(obj, shallow) {\r\n            return inspect(obj, shallow);\r\n        }\r\n\r\n        /**\r\n         * Convert to a readable xml/html Json structure\r\n         * @param {Object} changes\r\n         * @return {string}\r\n         * @param shallow\r\n         */\r\n        function formatChangesToXMLString(changes, shallow) {\r\n            var properties = [];\r\n\r\n            if (changes.changed == 'equal') {\r\n                return '';\r\n            }\r\n\r\n            var diff = changes.value;\r\n\r\n            for (var key in diff) {\r\n                var changed = diff[key].changed;\r\n                if (changed !== 'equal')\r\n                    properties.push(formatChange(key, diff[key], shallow, true));\r\n            }\r\n\r\n            return '<span>' + openChar + '</span>\\n<div class=\"diff-level\">' + properties.join('<span>,</span>\\n') + '\\n</div><span>' + closeChar + '</span>';\r\n\r\n        }\r\n\r\n        /**\r\n         * @param obj\r\n         * @returns {{changed: string, value: *}}\r\n         */\r\n        function equalObj(obj) {\r\n            return {\r\n                changed: 'equal',\r\n                value: obj\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @param a\r\n         * @param b\r\n         * @returns {*|boolean}\r\n         */\r\n        function isValidAttr(a, b) {\r\n            var typeA = typeof a;\r\n            var typeB = typeof b;\r\n            return (a && b && (typeA == 'object' || typeA == 'function') && (typeB == 'object' || typeB == 'function'));\r\n        }\r\n\r\n        /**\r\n         * @param key\r\n         * @param diffItem\r\n         * @returns {*}\r\n         * @param shallow\r\n         * @param diffOnly\r\n         */\r\n        function formatChange(key, diffItem, shallow, diffOnly) {\r\n            var changed = diffItem.changed;\r\n            var property;\r\n            switch (changed) {\r\n                case 'equal':\r\n                    property = (stringifyObjectKey(escapeHTML(key)) + '<span>: </span>' + inspect(diffItem.value));\r\n                    break;\r\n\r\n                case 'removed':\r\n                    property = ('<del class=\"diff\">' + stringifyObjectKey(escapeHTML(key)) + '<span>: </span>' + inspect(diffItem.value) + '</del>');\r\n                    break;\r\n\r\n                case 'added':\r\n                    property = ('<ins class=\"diff\">' + stringifyObjectKey(escapeHTML(key)) + '<span>: </span>' + inspect(diffItem.value) + '</ins>');\r\n                    break;\r\n\r\n                case 'primitive change':\r\n                    var prefix = stringifyObjectKey(escapeHTML(key)) + '<span>: </span>';\r\n                    property = (\r\n                    '<del class=\"diff diff-key\">' + prefix + inspect(diffItem.removed) + '</del><span>,</span>\\n' +\r\n                    '<ins class=\"diff diff-key\">' + prefix + inspect(diffItem.added) + '</ins>');\r\n                    break;\r\n\r\n                case 'object change':\r\n                    property = shallow ? '' : (stringifyObjectKey(key) + '<span>: </span>' + ( diffOnly ? formatChangesToXMLString(diffItem) : formatToJsonXMLString(diffItem)));\r\n                    break;\r\n            }\r\n\r\n            return property;\r\n        }\r\n\r\n        /**\r\n         * @param {string} key\r\n         * @return {string}\r\n         */\r\n        function stringifyObjectKey(key) {\r\n            return /^[a-z0-9_$]*$/i.test(key) ?\r\n                key :\r\n                JSON.stringify(key);\r\n        }\r\n\r\n        /**\r\n         * @param {string} string\r\n         * @return {string}\r\n         */\r\n        function escapeHTML(string) {\r\n            return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        }\r\n\r\n        /**\r\n         * @param {Object} obj\r\n         * @return {string}\r\n         * @param shallow\r\n         */\r\n        function inspect(obj, shallow) {\r\n\r\n            return _inspect('', obj, shallow);\r\n\r\n            /**\r\n             * @param {string} accumulator\r\n             * @param {object} obj\r\n             * @see http://jsperf.com/continuation-passing-style/3\r\n             * @return {string}\r\n             * @param shallow\r\n             */\r\n            function _inspect(accumulator, obj, shallow) {\r\n                switch (typeof obj) {\r\n                    case 'object':\r\n                        if (!obj) {\r\n                            accumulator += 'null';\r\n                            break;\r\n                        }\r\n                        if (shallow) {\r\n                            accumulator += '[object]';\r\n                            break;\r\n                        }\r\n                        var keys = Object.keys(obj);\r\n                        var length = keys.length;\r\n                        if (length === 0) {\r\n                            accumulator += '<span>' + openChar + closeChar + '</span>';\r\n                        } else {\r\n                            accumulator += '<span>' + openChar + '</span>\\n<div class=\"diff-level\">';\r\n                            for (var i = 0; i < length; i++) {\r\n                                var key = keys[i];\r\n                                accumulator = _inspect(accumulator + stringifyObjectKey(escapeHTML(key)) + '<span>: </span>', obj[key]);\r\n                                if (i < length - 1) {\r\n                                    accumulator += '<span>,</span>\\n';\r\n                                }\r\n                            }\r\n                            accumulator += '\\n</div><span>' + closeChar + '</span>'\r\n                        }\r\n                        break;\r\n\r\n                    case 'string':\r\n                        accumulator += JSON.stringify(escapeHTML(obj));\r\n                        break;\r\n\r\n                    case 'undefined':\r\n                        accumulator += 'undefined';\r\n                        break;\r\n\r\n                    default:\r\n                        accumulator += escapeHTML(String(obj));\r\n                        break;\r\n                }\r\n                return accumulator;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* filter implementation */\r\n    function toJsonViewFilter(ObjectDiff) {\r\n        return function (value) {\r\n            return ObjectDiff.toJsonView(value);\r\n        };\r\n    }\r\n\r\n    function toJsonDiffViewFilter(ObjectDiff) {\r\n        return function (value) {\r\n            return ObjectDiff.toJsonDiffView(value);\r\n        };\r\n    }\r\n\r\n    function objToJsonViewFilter(ObjectDiff) {\r\n        return function (value) {\r\n            return ObjectDiff.objToJsonView(value);\r\n        };\r\n    }\r\n})();\r\n"],"sourceRoot":"/source/"}